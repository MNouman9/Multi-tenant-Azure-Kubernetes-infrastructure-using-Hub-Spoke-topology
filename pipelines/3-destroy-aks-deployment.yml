name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
pr: none

variables:
- group: global-variables
- name: azureSubscription
  value: olx-test
- name: terraformVersion
  value: '1.6.5'
- name: terraformPath
  value: terraform
- name: tfstatePath
  value: terraform.tfstate
- name: environment
  value: staging
- name: prefix
  value: OLXAKS
- name: location
  value: eastus
- name: kubernetesVersion
  value: '1.30'
- name: resourceGroupName
  value: rg-olx-aks1
- name: containerName
  value: scripts
- name: scriptPath
  value: terraform/scripts
- name: linuxBuildAgentScriptName
  value: configure-linux-build-agent-vm.sh.tftpl
- name: windowsBuildAgentScriptName
  value: configure-windows-build-agent-vm.ps1
- name: windowsScriptName
  value: configure-jumpbox-vm.ps1

pool:
    vmImage: ubuntu-latest

stages :
- stage: destroy
  displayName: 'Terraform Destroy'
  jobs:
  - job: destroy
    timeoutInMinutes: 0
    displayName: 'Terraform Destroy'
    continueOnError: false
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Create Temporary Storage Account'
      continueOnError: true
      inputs:
        scriptType: bash
        scriptLocation: inlineScript
        azureSubscription: $(azureSubscription)
        addSpnToEnvironment: true
        inlineScript: |
          #Variables
          postfix=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 8 | head -n 1)
          storageAccountResourceGroupName="rg$postfix"
          storageAccountName="scriptstorage$postfix"
          sku="Standard_LRS"
          subscriptionName=$(az account show --query name --output tsv)

          # Create resource group
          echo "Checking if [$storageAccountResourceGroupName] resource group actually exists in the [$subscriptionName] subscription..."
          az group show --name $storageAccountResourceGroupName &>/dev/null

          if [[ $? != 0 ]]; then
              echo "No [$storageAccountResourceGroupName] resource group actually exists in the [$subscriptionName] subscription"
              echo "Creating [$storageAccountResourceGroupName] resource group in the [$subscriptionName] subscription..."

              # Create the resource group
              az group create \
                  --name $storageAccountResourceGroupName \
                  --location $(location) 1>/dev/null

              if [[ $? == 0 ]]; then
                  echo "[$storageAccountResourceGroupName] resource group successfully created in the [$subscriptionName] subscription"
              else
                  echo "Failed to create [$storageAccountResourceGroupName] resource group in the [$subscriptionName] subscription"
                  exit -1
              fi
          else
              echo "[$storageAccountResourceGroupName] resource group already exists in the [$subscriptionName] subscription"
          fi

          # Create storage account
          echo "Checking if [$storageAccountName] storage account actually exists in the [$subscriptionName] subscription..."
          az storage account --name $storageAccountName &>/dev/null

          if [[ $? != 0 ]]; then
              echo "No [$storageAccountName] storage account actually exists in the [$subscriptionName] subscription"
              echo "Creating [$storageAccountName] storage account in the [$subscriptionName] subscription..."

              az storage account create \
                  --resource-group $storageAccountResourceGroupName \
                  --name $storageAccountName \
                  --sku $sku \
                  --encryption-services blob 1>/dev/null

              # Create the storage account
              if  [[ $? == 0 ]]; then
                  echo "[$storageAccountName] storage account successfully created in the [$subscriptionName] subscription"
              else
                  echo "Failed to create [$storageAccountName] storage account in the [$subscriptionName] subscription"
                  exit -1
              fi
          else
              echo "[$storageAccountName] storage account already exists in the [$subscriptionName] subscription"
          fi

          # Get storage account key
          echo "Retrieving the primary key of the [$storageAccountName] storage account..."
          storageAccountKey=$(az storage account keys list --resource-group $storageAccountResourceGroupName --account-name $storageAccountName --query [0].value -o tsv)

          if [[ -n $storageAccountKey ]]; then
              echo "Primary key of the [$storageAccountName] storage account successfully retrieved"
          else
              echo "Failed to retrieve the primary key of the [$storageAccountName] storage account"
              exit -1
          fi

          # Create blob container
          echo "Checking if [$(containerName)] container actually exists in the [$storageAccountName] storage account..."
          az storage container show \
              --name $(containerName) \
              --account-name $storageAccountName \
              --account-key $storageAccountKey &>/dev/null

          if [[ $? != 0 ]]; then
              echo "No [$(containerName)] container actually exists in the [$storageAccountName] storage account"
              echo "Creating [$(containerName)] container in the [$storageAccountName] storage account..."

              # Create the container
              az storage container create \
                  --name $(containerName) \
                  --account-name $storageAccountName \
                  --account-key $storageAccountKey 1>/dev/null

              if  [[ $? == 0 ]]; then
                  echo "[$(containerName)] container successfully created in the [$storageAccountName] storage account"
              else
                  echo "Failed to create [$(containerName)] container in the [$storageAccountName] storage account"
                  exit -1
              fi
          else
              echo "[$(containerName)] container already exists in the [$storageAccountName] storage account"
          fi

          # Copy script as blob to the storage account container
          az storage blob upload \
            --container-name $(containerName) \
            --name $(linuxBuildAgentScriptName) \
            --account-name $storageAccountName \
            --account-key $storageAccountKey \
            --file "$(System.DefaultWorkingDirectory)/$(scriptPath)/$(linuxBuildAgentScriptName)"
          
          if  [[ $? == 0 ]]; then
              echo "[$(linuxBuildAgentScriptName)] successfully copied to the [$(containerName)] container in the [$storageAccountName] storage account"
          else
              echo "Failed to copy the [$(linuxBuildAgentScriptName)] script to the [$(containerName)] container in the [$storageAccountName] storage account"
              exit -1
          fi

          # Copy windows script as blob to the storage account container
          az storage blob upload \
            --container-name $(containerName) \
            --name $(windowsBuildAgentScriptName) \
            --account-name $storageAccountName \
            --account-key $storageAccountKey \
            --file "$(System.DefaultWorkingDirectory)/$(scriptPath)/$(windowsBuildAgentScriptName)"
          
          if  [[ $? == 0 ]]; then
              echo "[$(windowsBuildAgentScriptName)] successfully copied to the [$(containerName)] container in the [$storageAccountName] storage account"
          else
              echo "Failed to copy the [$(windowsBuildAgentScriptName)] script to the [$(containerName)] container in the [$storageAccountName] storage account"
              exit -1
          fi

          # Copy windows script as blob to the storage account container
          az storage blob upload \
            --container-name $(containerName) \
            --name $(windowsScriptName) \
            --account-name $storageAccountName \
            --account-key $storageAccountKey \
            --file "$(System.DefaultWorkingDirectory)/$(scriptPath)/$(windowsScriptName)"
          
          if  [[ $? == 0 ]]; then
              echo "[$(windowsScriptName)] successfully copied to the [$(containerName)] container in the [$storageAccountName] storage account"
          else
              echo "Failed to copy the [$(windowsScriptName)] script to the [$(containerName)] container in the [$storageAccountName] storage account"
              exit -1
          fi

          # Print data
          echo "----------------------------------------------------------------------------------------------"
          echo "storageAccountName: $storageAccountName"
          echo "containerName: $(containerName)"

          echo "##vso[task.setvariable variable=storageAccountResourceGroupName;]$storageAccountResourceGroupName"
          echo "##vso[task.setvariable variable=storageAccountName;]$storageAccountName"
          echo "##vso[task.setvariable variable=storageAccountKey;]$storageAccountKey"
          echo "##vso[task.setvariable variable=ok;]true"
    - bash: |
        echo "Storage Account Name: $(storageAccountName)"
        echo "Storage Account Key: $(storageAccountKey)"
      displayName: 'Print Variables'
      condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
    - task: TerraformInstaller@0
      displayName: 'Terraform Install'
      condition: and(succeeded(), not(eq(variables.storageAccountName, '')), not(eq(variables.storageAccountKey, '')))
      inputs:
        terraformVersion: $(terraformVersion)    
    - task: TerraformTaskV2@2
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'olx-azure-terraform-state'
        backendAzureRmResourceGroupName: $(terraformBackendResourceGroupName)
        backendAzureRmStorageAccountName: $(terraformBackendStorageAccountName)
        backendAzureRmContainerName: '$(terraformBackendContainerName)'
        backendAzureRmKey: $(tfstatePath)
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformPath)/'
    - task: TerraformTaskV1@0
      displayName: 'Terraform Destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: '-input=false -auto-approve -var "ssh_public_key=$(sshPublicKey)" -var "script_storage_account_name=$(storageAccountName)" -var "script_storage_account_key=$(storageAccountKey)" -var="container_name=$(containerName)"  -var="kubernetes_version=$(kubernetesVersion)" -var="azure_devops_url=$(azureDevOpsUrl)" -var="azure_devops_pat=$(azureDevOpsPat)" -var="azure_devops_agent_pool_name=$(azureDevOpsAgentPoolName)" -var-file="$(System.DefaultWorkingDirectory)/tfvars/$(environment)/$(environment).tfvars"'
        environmentServiceNameAzureRM: $(azureSubscription)
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(terraformPath)/'
    - task: AzureCLI@2
      displayName: 'Delete Temporary Storage Account'
      condition: always()
      inputs:
        scriptType: bash
        scriptLocation: inlineScript
        azureSubscription: $(azureSubscription)
        addSpnToEnvironment: true
        inlineScript: |
          az group delete \
            --name $(storageAccountResourceGroupName) \
            --yes
            
          if  [[ $? == 0 ]]; then
              echo "Temporary storage account successfully deleted"
          else
              echo "Failed to delete the temporary storage account"
              exit -1
          fi        